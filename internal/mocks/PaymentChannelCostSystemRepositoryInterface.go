// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import billingpb "github.com/paysuper/paysuper-proto/go/billingpb"
import context "context"
import mock "github.com/stretchr/testify/mock"

// PaymentChannelCostSystemRepositoryInterface is an autogenerated mock type for the PaymentChannelCostSystemRepositoryInterface type
type PaymentChannelCostSystemRepositoryInterface struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, obj
func (_m *PaymentChannelCostSystemRepositoryInterface) Delete(ctx context.Context, obj *billingpb.PaymentChannelCostSystem) error {
	ret := _m.Called(ctx, obj)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PaymentChannelCostSystem) error); ok {
		r0 = rf(ctx, obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4, _a5
func (_m *PaymentChannelCostSystemRepositoryInterface) Find(_a0 context.Context, _a1 string, _a2 string, _a3 string, _a4 string, _a5 string) (*billingpb.PaymentChannelCostSystem, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4, _a5)

	var r0 *billingpb.PaymentChannelCostSystem
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string) *billingpb.PaymentChannelCostSystem); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4, _a5)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.PaymentChannelCostSystem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4, _a5)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: _a0
func (_m *PaymentChannelCostSystemRepositoryInterface) GetAll(_a0 context.Context) ([]*billingpb.PaymentChannelCostSystem, error) {
	ret := _m.Called(_a0)

	var r0 []*billingpb.PaymentChannelCostSystem
	if rf, ok := ret.Get(0).(func(context.Context) []*billingpb.PaymentChannelCostSystem); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*billingpb.PaymentChannelCostSystem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: _a0, _a1
func (_m *PaymentChannelCostSystemRepositoryInterface) GetById(_a0 context.Context, _a1 string) (*billingpb.PaymentChannelCostSystem, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *billingpb.PaymentChannelCostSystem
	if rf, ok := ret.Get(0).(func(context.Context, string) *billingpb.PaymentChannelCostSystem); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.PaymentChannelCostSystem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: _a0, _a1
func (_m *PaymentChannelCostSystemRepositoryInterface) Insert(_a0 context.Context, _a1 *billingpb.PaymentChannelCostSystem) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PaymentChannelCostSystem) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MultipleInsert provides a mock function with given fields: _a0, _a1
func (_m *PaymentChannelCostSystemRepositoryInterface) MultipleInsert(_a0 context.Context, _a1 []*billingpb.PaymentChannelCostSystem) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*billingpb.PaymentChannelCostSystem) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *PaymentChannelCostSystemRepositoryInterface) Update(_a0 context.Context, _a1 *billingpb.PaymentChannelCostSystem) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PaymentChannelCostSystem) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
