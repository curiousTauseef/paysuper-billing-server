// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import billingpb "github.com/paysuper/paysuper-proto/go/billingpb"
import context "context"
import mock "github.com/stretchr/testify/mock"

// TurnoverRepositoryInterface is an autogenerated mock type for the TurnoverRepositoryInterface type
type TurnoverRepositoryInterface struct {
	mock.Mock
}

// CountAll provides a mock function with given fields: _a0
func (_m *TurnoverRepositoryInterface) CountAll(_a0 context.Context) (int64, error) {
	ret := _m.Called(_a0)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *TurnoverRepositoryInterface) Get(_a0 context.Context, _a1 string, _a2 string, _a3 int) (*billingpb.AnnualTurnover, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *billingpb.AnnualTurnover
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) *billingpb.AnnualTurnover); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.AnnualTurnover)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: _a0, _a1
func (_m *TurnoverRepositoryInterface) Upsert(_a0 context.Context, _a1 *billingpb.AnnualTurnover) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.AnnualTurnover) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
