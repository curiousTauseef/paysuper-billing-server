// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import billingpb "github.com/paysuper/paysuper-proto/go/billingpb"
import context "context"
import mock "github.com/stretchr/testify/mock"

// KeyRepositoryInterface is an autogenerated mock type for the KeyRepositoryInterface type
type KeyRepositoryInterface struct {
	mock.Mock
}

// CancelById provides a mock function with given fields: _a0, _a1
func (_m *KeyRepositoryInterface) CancelById(_a0 context.Context, _a1 string) (*billingpb.Key, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *billingpb.Key
	if rf, ok := ret.Get(0).(func(context.Context, string) *billingpb.Key); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.Key)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountKeysByProductPlatform provides a mock function with given fields: _a0, _a1, _a2
func (_m *KeyRepositoryInterface) CountKeysByProductPlatform(_a0 context.Context, _a1 string, _a2 string) (int64, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string, string) int64); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUnfinished provides a mock function with given fields: _a0
func (_m *KeyRepositoryInterface) FindUnfinished(_a0 context.Context) ([]*billingpb.Key, error) {
	ret := _m.Called(_a0)

	var r0 []*billingpb.Key
	if rf, ok := ret.Get(0).(func(context.Context) []*billingpb.Key); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*billingpb.Key)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FinishRedeemById provides a mock function with given fields: _a0, _a1
func (_m *KeyRepositoryInterface) FinishRedeemById(_a0 context.Context, _a1 string) (*billingpb.Key, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *billingpb.Key
	if rf, ok := ret.Get(0).(func(context.Context, string) *billingpb.Key); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.Key)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: _a0, _a1
func (_m *KeyRepositoryInterface) GetById(_a0 context.Context, _a1 string) (*billingpb.Key, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *billingpb.Key
	if rf, ok := ret.Get(0).(func(context.Context, string) *billingpb.Key); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.Key)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: _a0, _a1
func (_m *KeyRepositoryInterface) Insert(_a0 context.Context, _a1 *billingpb.Key) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.Key) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReserveKey provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *KeyRepositoryInterface) ReserveKey(_a0 context.Context, _a1 string, _a2 string, _a3 string, _a4 int32) (*billingpb.Key, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 *billingpb.Key
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, int32) *billingpb.Key); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.Key)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, int32) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
