// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import billingpb "github.com/paysuper/paysuper-proto/go/billingpb"
import context "context"
import mock "github.com/stretchr/testify/mock"

// OperatingCompanyRepositoryInterface is an autogenerated mock type for the OperatingCompanyRepositoryInterface type
type OperatingCompanyRepositoryInterface struct {
	mock.Mock
}

// Exists provides a mock function with given fields: ctx, id
func (_m *OperatingCompanyRepositoryInterface) Exists(ctx context.Context, id string) bool {
	ret := _m.Called(ctx, id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx
func (_m *OperatingCompanyRepositoryInterface) GetAll(ctx context.Context) ([]*billingpb.OperatingCompany, error) {
	ret := _m.Called(ctx)

	var r0 []*billingpb.OperatingCompany
	if rf, ok := ret.Get(0).(func(context.Context) []*billingpb.OperatingCompany); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*billingpb.OperatingCompany)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: ctx, id
func (_m *OperatingCompanyRepositoryInterface) GetById(ctx context.Context, id string) (*billingpb.OperatingCompany, error) {
	ret := _m.Called(ctx, id)

	var r0 *billingpb.OperatingCompany
	if rf, ok := ret.Get(0).(func(context.Context, string) *billingpb.OperatingCompany); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.OperatingCompany)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByPaymentCountry provides a mock function with given fields: ctx, countryCode
func (_m *OperatingCompanyRepositoryInterface) GetByPaymentCountry(ctx context.Context, countryCode string) (*billingpb.OperatingCompany, error) {
	ret := _m.Called(ctx, countryCode)

	var r0 *billingpb.OperatingCompany
	if rf, ok := ret.Get(0).(func(context.Context, string) *billingpb.OperatingCompany); ok {
		r0 = rf(ctx, countryCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.OperatingCompany)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, countryCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: ctx, oc
func (_m *OperatingCompanyRepositoryInterface) Upsert(ctx context.Context, oc *billingpb.OperatingCompany) error {
	ret := _m.Called(ctx, oc)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.OperatingCompany) error); ok {
		r0 = rf(ctx, oc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
