// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import billingpb "github.com/paysuper/paysuper-proto/go/billingpb"
import context "context"
import mock "github.com/stretchr/testify/mock"
import options "go.mongodb.org/mongo-driver/mongo/options"
import primitive "go.mongodb.org/mongo-driver/bson/primitive"

// CustomerRepositoryInterface is an autogenerated mock type for the CustomerRepositoryInterface type
type CustomerRepositoryInterface struct {
	mock.Mock
}

// CountBy provides a mock function with given fields: ctx, query
func (_m *CustomerRepositoryInterface) CountBy(ctx context.Context, query primitive.M) (int64, error) {
	ret := _m.Called(ctx, query)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, primitive.M) int64); ok {
		r0 = rf(ctx, query)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, primitive.M) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Find provides a mock function with given fields: _a0, _a1, _a2
func (_m *CustomerRepositoryInterface) Find(_a0 context.Context, _a1 string, _a2 *billingpb.TokenUser) (*billingpb.Customer, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *billingpb.Customer
	if rf, ok := ret.Get(0).(func(context.Context, string, *billingpb.TokenUser) *billingpb.Customer); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.Customer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *billingpb.TokenUser) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields: ctx
func (_m *CustomerRepositoryInterface) FindAll(ctx context.Context) ([]*billingpb.Customer, error) {
	ret := _m.Called(ctx)

	var r0 []*billingpb.Customer
	if rf, ok := ret.Get(0).(func(context.Context) []*billingpb.Customer); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*billingpb.Customer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindBy provides a mock function with given fields: ctx, query, opts
func (_m *CustomerRepositoryInterface) FindBy(ctx context.Context, query primitive.M, opts ...*options.FindOptions) ([]*billingpb.Customer, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*billingpb.Customer
	if rf, ok := ret.Get(0).(func(context.Context, primitive.M, ...*options.FindOptions) []*billingpb.Customer); ok {
		r0 = rf(ctx, query, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*billingpb.Customer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, primitive.M, ...*options.FindOptions) error); ok {
		r1 = rf(ctx, query, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: _a0, _a1
func (_m *CustomerRepositoryInterface) GetById(_a0 context.Context, _a1 string) (*billingpb.Customer, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *billingpb.Customer
	if rf, ok := ret.Get(0).(func(context.Context, string) *billingpb.Customer); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.Customer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: _a0, _a1
func (_m *CustomerRepositoryInterface) Insert(_a0 context.Context, _a1 *billingpb.Customer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.Customer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *CustomerRepositoryInterface) Update(_a0 context.Context, _a1 *billingpb.Customer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.Customer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
