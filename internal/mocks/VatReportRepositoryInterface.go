// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import billingpb "github.com/paysuper/paysuper-proto/go/billingpb"
import context "context"
import mock "github.com/stretchr/testify/mock"

import time "time"

// VatReportRepositoryInterface is an autogenerated mock type for the VatReportRepositoryInterface type
type VatReportRepositoryInterface struct {
	mock.Mock
}

// GetByCountry provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *VatReportRepositoryInterface) GetByCountry(_a0 context.Context, _a1 string, _a2 []string, _a3 int64, _a4 int64) ([]*billingpb.VatReport, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 []*billingpb.VatReport
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, int64, int64) []*billingpb.VatReport); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*billingpb.VatReport)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, []string, int64, int64) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByCountryPeriod provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *VatReportRepositoryInterface) GetByCountryPeriod(_a0 context.Context, _a1 string, _a2 time.Time, _a3 time.Time) (*billingpb.VatReport, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *billingpb.VatReport
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, time.Time) *billingpb.VatReport); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.VatReport)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, time.Time, time.Time) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: _a0, _a1
func (_m *VatReportRepositoryInterface) GetById(_a0 context.Context, _a1 string) (*billingpb.VatReport, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *billingpb.VatReport
	if rf, ok := ret.Get(0).(func(context.Context, string) *billingpb.VatReport); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.VatReport)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByStatus provides a mock function with given fields: _a0, _a1
func (_m *VatReportRepositoryInterface) GetByStatus(_a0 context.Context, _a1 []string) ([]*billingpb.VatReport, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []*billingpb.VatReport
	if rf, ok := ret.Get(0).(func(context.Context, []string) []*billingpb.VatReport); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*billingpb.VatReport)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: _a0, _a1
func (_m *VatReportRepositoryInterface) Insert(_a0 context.Context, _a1 *billingpb.VatReport) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.VatReport) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *VatReportRepositoryInterface) Update(_a0 context.Context, _a1 *billingpb.VatReport) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.VatReport) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
