// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import billingpb "github.com/paysuper/paysuper-proto/go/billingpb"
import context "context"
import mock "github.com/stretchr/testify/mock"

// PaymentMethodRepositoryInterface is an autogenerated mock type for the PaymentMethodRepositoryInterface type
type PaymentMethodRepositoryInterface struct {
	mock.Mock
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *PaymentMethodRepositoryInterface) Delete(_a0 context.Context, _a1 *billingpb.PaymentMethod) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PaymentMethod) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByName provides a mock function with given fields: _a0, _a1, _a2
func (_m *PaymentMethodRepositoryInterface) FindByName(_a0 context.Context, _a1 string, _a2 []string) ([]*billingpb.PaymentMethod, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 []*billingpb.PaymentMethod
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) []*billingpb.PaymentMethod); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*billingpb.PaymentMethod)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, []string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx
func (_m *PaymentMethodRepositoryInterface) GetAll(ctx context.Context) ([]*billingpb.PaymentMethod, error) {
	ret := _m.Called(ctx)

	var r0 []*billingpb.PaymentMethod
	if rf, ok := ret.Get(0).(func(context.Context) []*billingpb.PaymentMethod); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*billingpb.PaymentMethod)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByGroupAndCurrency provides a mock function with given fields: ctx, isProduction, group, currency
func (_m *PaymentMethodRepositoryInterface) GetByGroupAndCurrency(ctx context.Context, isProduction bool, group string, currency string) (*billingpb.PaymentMethod, error) {
	ret := _m.Called(ctx, isProduction, group, currency)

	var r0 *billingpb.PaymentMethod
	if rf, ok := ret.Get(0).(func(context.Context, bool, string, string) *billingpb.PaymentMethod); ok {
		r0 = rf(ctx, isProduction, group, currency)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.PaymentMethod)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, bool, string, string) error); ok {
		r1 = rf(ctx, isProduction, group, currency)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: _a0, _a1
func (_m *PaymentMethodRepositoryInterface) GetById(_a0 context.Context, _a1 string) (*billingpb.PaymentMethod, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *billingpb.PaymentMethod
	if rf, ok := ret.Get(0).(func(context.Context, string) *billingpb.PaymentMethod); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.PaymentMethod)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: _a0, _a1
func (_m *PaymentMethodRepositoryInterface) Insert(_a0 context.Context, _a1 *billingpb.PaymentMethod) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PaymentMethod) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListByOrder provides a mock function with given fields: ctx, order
func (_m *PaymentMethodRepositoryInterface) ListByOrder(ctx context.Context, order *billingpb.Order) ([]*billingpb.PaymentMethod, error) {
	ret := _m.Called(ctx, order)

	var r0 []*billingpb.PaymentMethod
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.Order) []*billingpb.PaymentMethod); ok {
		r0 = rf(ctx, order)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*billingpb.PaymentMethod)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billingpb.Order) error); ok {
		r1 = rf(ctx, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MultipleInsert provides a mock function with given fields: _a0, _a1
func (_m *PaymentMethodRepositoryInterface) MultipleInsert(_a0 context.Context, _a1 []*billingpb.PaymentMethod) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*billingpb.PaymentMethod) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *PaymentMethodRepositoryInterface) Update(_a0 context.Context, _a1 *billingpb.PaymentMethod) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.PaymentMethod) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
