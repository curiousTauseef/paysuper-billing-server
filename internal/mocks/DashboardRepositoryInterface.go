// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import billingpb "github.com/paysuper/paysuper-proto/go/billingpb"
import context "context"
import mock "github.com/stretchr/testify/mock"

// DashboardRepositoryInterface is an autogenerated mock type for the DashboardRepositoryInterface type
type DashboardRepositoryInterface struct {
	mock.Mock
}

// GetBaseReport provides a mock function with given fields: ctx, merchantId, period
func (_m *DashboardRepositoryInterface) GetBaseReport(ctx context.Context, merchantId string, period string) (*billingpb.DashboardBaseReports, error) {
	ret := _m.Called(ctx, merchantId, period)

	var r0 *billingpb.DashboardBaseReports
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *billingpb.DashboardBaseReports); ok {
		r0 = rf(ctx, merchantId, period)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.DashboardBaseReports)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, merchantId, period)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomerARPU provides a mock function with given fields: ctx, merchantId, customerId
func (_m *DashboardRepositoryInterface) GetCustomerARPU(ctx context.Context, merchantId string, customerId string) (*billingpb.DashboardAmountItemWithChart, error) {
	ret := _m.Called(ctx, merchantId, customerId)

	var r0 *billingpb.DashboardAmountItemWithChart
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *billingpb.DashboardAmountItemWithChart); ok {
		r0 = rf(ctx, merchantId, customerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.DashboardAmountItemWithChart)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, merchantId, customerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomersReport provides a mock function with given fields: ctx, merchantId, period
func (_m *DashboardRepositoryInterface) GetCustomersReport(ctx context.Context, merchantId string, period string) (*billingpb.DashboardCustomerReport, error) {
	ret := _m.Called(ctx, merchantId, period)

	var r0 *billingpb.DashboardCustomerReport
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *billingpb.DashboardCustomerReport); ok {
		r0 = rf(ctx, merchantId, period)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.DashboardCustomerReport)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, merchantId, period)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMainReport provides a mock function with given fields: ctx, merchantId, period
func (_m *DashboardRepositoryInterface) GetMainReport(ctx context.Context, merchantId string, period string) (*billingpb.DashboardMainReport, error) {
	ret := _m.Called(ctx, merchantId, period)

	var r0 *billingpb.DashboardMainReport
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *billingpb.DashboardMainReport); ok {
		r0 = rf(ctx, merchantId, period)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.DashboardMainReport)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, merchantId, period)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRevenueDynamicsReport provides a mock function with given fields: ctx, merchantId, period
func (_m *DashboardRepositoryInterface) GetRevenueDynamicsReport(ctx context.Context, merchantId string, period string) (*billingpb.DashboardRevenueDynamicReport, error) {
	ret := _m.Called(ctx, merchantId, period)

	var r0 *billingpb.DashboardRevenueDynamicReport
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *billingpb.DashboardRevenueDynamicReport); ok {
		r0 = rf(ctx, merchantId, period)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.DashboardRevenueDynamicReport)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, merchantId, period)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
