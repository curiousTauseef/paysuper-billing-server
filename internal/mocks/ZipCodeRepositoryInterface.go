// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import billingpb "github.com/paysuper/paysuper-proto/go/billingpb"
import context "context"
import mock "github.com/stretchr/testify/mock"

// ZipCodeRepositoryInterface is an autogenerated mock type for the ZipCodeRepositoryInterface type
type ZipCodeRepositoryInterface struct {
	mock.Mock
}

// CountByZip provides a mock function with given fields: _a0, _a1, _a2
func (_m *ZipCodeRepositoryInterface) CountByZip(_a0 context.Context, _a1 string, _a2 string) (int64, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string, string) int64); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByZipAndCountry provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *ZipCodeRepositoryInterface) FindByZipAndCountry(_a0 context.Context, _a1 string, _a2 string, _a3 int64, _a4 int64) ([]*billingpb.ZipCode, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 []*billingpb.ZipCode
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, int64) []*billingpb.ZipCode); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*billingpb.ZipCode)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64, int64) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByZipAndCountry provides a mock function with given fields: _a0, _a1, _a2
func (_m *ZipCodeRepositoryInterface) GetByZipAndCountry(_a0 context.Context, _a1 string, _a2 string) (*billingpb.ZipCode, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *billingpb.ZipCode
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *billingpb.ZipCode); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.ZipCode)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: _a0, _a1
func (_m *ZipCodeRepositoryInterface) Insert(_a0 context.Context, _a1 *billingpb.ZipCode) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ZipCode) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
