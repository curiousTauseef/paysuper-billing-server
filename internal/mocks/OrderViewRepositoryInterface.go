// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import billingpb "github.com/paysuper/paysuper-proto/go/billingpb"
import context "context"
import mock "github.com/stretchr/testify/mock"
import options "go.mongodb.org/mongo-driver/mongo/options"
import pkg "github.com/paysuper/paysuper-billing-server/internal/pkg"
import primitive "go.mongodb.org/mongo-driver/bson/primitive"

import time "time"

// OrderViewRepositoryInterface is an autogenerated mock type for the OrderViewRepositoryInterface type
type OrderViewRepositoryInterface struct {
	mock.Mock
}

// CountTransactions provides a mock function with given fields: ctx, match
func (_m *OrderViewRepositoryInterface) CountTransactions(ctx context.Context, match primitive.M) (int64, error) {
	ret := _m.Called(ctx, match)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, primitive.M) int64); ok {
		r0 = rf(ctx, match)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, primitive.M) error); ok {
		r1 = rf(ctx, match)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: _a0, _a1
func (_m *OrderViewRepositoryInterface) GetById(_a0 context.Context, _a1 string) (*billingpb.OrderViewPublic, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *billingpb.OrderViewPublic
	if rf, ok := ret.Get(0).(func(context.Context, string) *billingpb.OrderViewPublic); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.OrderViewPublic)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetManyBy provides a mock function with given fields: ctx, filter, opts
func (_m *OrderViewRepositoryInterface) GetManyBy(ctx context.Context, filter primitive.M, opts ...*options.FindOptions) ([]*billingpb.OrderViewPrivate, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filter)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*billingpb.OrderViewPrivate
	if rf, ok := ret.Get(0).(func(context.Context, primitive.M, ...*options.FindOptions) []*billingpb.OrderViewPrivate); ok {
		r0 = rf(ctx, filter, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*billingpb.OrderViewPrivate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, primitive.M, ...*options.FindOptions) error); ok {
		r1 = rf(ctx, filter, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaylinkStat provides a mock function with given fields: ctx, paylinkId, merchantId, from, to
func (_m *OrderViewRepositoryInterface) GetPaylinkStat(ctx context.Context, paylinkId string, merchantId string, from int64, to int64) (*billingpb.StatCommon, error) {
	ret := _m.Called(ctx, paylinkId, merchantId, from, to)

	var r0 *billingpb.StatCommon
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, int64) *billingpb.StatCommon); ok {
		r0 = rf(ctx, paylinkId, merchantId, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.StatCommon)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64, int64) error); ok {
		r1 = rf(ctx, paylinkId, merchantId, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaylinkStatByCountry provides a mock function with given fields: ctx, paylinkId, merchantId, from, to
func (_m *OrderViewRepositoryInterface) GetPaylinkStatByCountry(ctx context.Context, paylinkId string, merchantId string, from int64, to int64) (*billingpb.GroupStatCommon, error) {
	ret := _m.Called(ctx, paylinkId, merchantId, from, to)

	var r0 *billingpb.GroupStatCommon
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, int64) *billingpb.GroupStatCommon); ok {
		r0 = rf(ctx, paylinkId, merchantId, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.GroupStatCommon)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64, int64) error); ok {
		r1 = rf(ctx, paylinkId, merchantId, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaylinkStatByDate provides a mock function with given fields: ctx, paylinkId, merchantId, from, to
func (_m *OrderViewRepositoryInterface) GetPaylinkStatByDate(ctx context.Context, paylinkId string, merchantId string, from int64, to int64) (*billingpb.GroupStatCommon, error) {
	ret := _m.Called(ctx, paylinkId, merchantId, from, to)

	var r0 *billingpb.GroupStatCommon
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, int64) *billingpb.GroupStatCommon); ok {
		r0 = rf(ctx, paylinkId, merchantId, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.GroupStatCommon)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64, int64) error); ok {
		r1 = rf(ctx, paylinkId, merchantId, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaylinkStatByReferrer provides a mock function with given fields: ctx, paylinkId, merchantId, from, to
func (_m *OrderViewRepositoryInterface) GetPaylinkStatByReferrer(ctx context.Context, paylinkId string, merchantId string, from int64, to int64) (*billingpb.GroupStatCommon, error) {
	ret := _m.Called(ctx, paylinkId, merchantId, from, to)

	var r0 *billingpb.GroupStatCommon
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, int64) *billingpb.GroupStatCommon); ok {
		r0 = rf(ctx, paylinkId, merchantId, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.GroupStatCommon)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64, int64) error); ok {
		r1 = rf(ctx, paylinkId, merchantId, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaylinkStatByUtm provides a mock function with given fields: ctx, paylinkId, merchantId, from, to
func (_m *OrderViewRepositoryInterface) GetPaylinkStatByUtm(ctx context.Context, paylinkId string, merchantId string, from int64, to int64) (*billingpb.GroupStatCommon, error) {
	ret := _m.Called(ctx, paylinkId, merchantId, from, to)

	var r0 *billingpb.GroupStatCommon
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, int64) *billingpb.GroupStatCommon); ok {
		r0 = rf(ctx, paylinkId, merchantId, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.GroupStatCommon)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64, int64) error); ok {
		r1 = rf(ctx, paylinkId, merchantId, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPrivateOrderBy provides a mock function with given fields: ctx, id, uuid, merchantId
func (_m *OrderViewRepositoryInterface) GetPrivateOrderBy(ctx context.Context, id string, uuid string, merchantId string) (*billingpb.OrderViewPrivate, error) {
	ret := _m.Called(ctx, id, uuid, merchantId)

	var r0 *billingpb.OrderViewPrivate
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *billingpb.OrderViewPrivate); ok {
		r0 = rf(ctx, id, uuid, merchantId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.OrderViewPrivate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, id, uuid, merchantId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPublicByOrderId provides a mock function with given fields: ctx, merchantId
func (_m *OrderViewRepositoryInterface) GetPublicByOrderId(ctx context.Context, merchantId string) (*billingpb.OrderViewPublic, error) {
	ret := _m.Called(ctx, merchantId)

	var r0 *billingpb.OrderViewPublic
	if rf, ok := ret.Get(0).(func(context.Context, string) *billingpb.OrderViewPublic); ok {
		r0 = rf(ctx, merchantId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.OrderViewPublic)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, merchantId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPublicOrderBy provides a mock function with given fields: ctx, id, uuid, merchantId
func (_m *OrderViewRepositoryInterface) GetPublicOrderBy(ctx context.Context, id string, uuid string, merchantId string) (*billingpb.OrderViewPublic, error) {
	ret := _m.Called(ctx, id, uuid, merchantId)

	var r0 *billingpb.OrderViewPublic
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *billingpb.OrderViewPublic); ok {
		r0 = rf(ctx, id, uuid, merchantId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.OrderViewPublic)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, id, uuid, merchantId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoyaltyForMerchants provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *OrderViewRepositoryInterface) GetRoyaltyForMerchants(_a0 context.Context, _a1 []string, _a2 time.Time, _a3 time.Time) ([]*pkg.RoyaltyReportMerchant, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 []*pkg.RoyaltyReportMerchant
	if rf, ok := ret.Get(0).(func(context.Context, []string, time.Time, time.Time) []*pkg.RoyaltyReportMerchant); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pkg.RoyaltyReportMerchant)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string, time.Time, time.Time) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoyaltySummary provides a mock function with given fields: ctx, merchantId, currency, from, to, hasExistsReportId
func (_m *OrderViewRepositoryInterface) GetRoyaltySummary(ctx context.Context, merchantId string, currency string, from time.Time, to time.Time, hasExistsReportId bool) ([]*billingpb.RoyaltyReportProductSummaryItem, *billingpb.RoyaltyReportProductSummaryItem, []primitive.ObjectID, error) {
	ret := _m.Called(ctx, merchantId, currency, from, to, hasExistsReportId)

	var r0 []*billingpb.RoyaltyReportProductSummaryItem
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Time, time.Time, bool) []*billingpb.RoyaltyReportProductSummaryItem); ok {
		r0 = rf(ctx, merchantId, currency, from, to, hasExistsReportId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*billingpb.RoyaltyReportProductSummaryItem)
		}
	}

	var r1 *billingpb.RoyaltyReportProductSummaryItem
	if rf, ok := ret.Get(1).(func(context.Context, string, string, time.Time, time.Time, bool) *billingpb.RoyaltyReportProductSummaryItem); ok {
		r1 = rf(ctx, merchantId, currency, from, to, hasExistsReportId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*billingpb.RoyaltyReportProductSummaryItem)
		}
	}

	var r2 []primitive.ObjectID
	if rf, ok := ret.Get(2).(func(context.Context, string, string, time.Time, time.Time, bool) []primitive.ObjectID); ok {
		r2 = rf(ctx, merchantId, currency, from, to, hasExistsReportId)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([]primitive.ObjectID)
		}
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(context.Context, string, string, time.Time, time.Time, bool) error); ok {
		r3 = rf(ctx, merchantId, currency, from, to, hasExistsReportId)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// GetRoyaltySummaryRoundedAmounts provides a mock function with given fields: ctx, merchantId, currency, from, to, hasExistsReportId
func (_m *OrderViewRepositoryInterface) GetRoyaltySummaryRoundedAmounts(ctx context.Context, merchantId string, currency string, from time.Time, to time.Time, hasExistsReportId bool) ([]*billingpb.RoyaltyReportProductSummaryItem, *billingpb.RoyaltyReportProductSummaryItem, []primitive.ObjectID, error) {
	ret := _m.Called(ctx, merchantId, currency, from, to, hasExistsReportId)

	var r0 []*billingpb.RoyaltyReportProductSummaryItem
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Time, time.Time, bool) []*billingpb.RoyaltyReportProductSummaryItem); ok {
		r0 = rf(ctx, merchantId, currency, from, to, hasExistsReportId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*billingpb.RoyaltyReportProductSummaryItem)
		}
	}

	var r1 *billingpb.RoyaltyReportProductSummaryItem
	if rf, ok := ret.Get(1).(func(context.Context, string, string, time.Time, time.Time, bool) *billingpb.RoyaltyReportProductSummaryItem); ok {
		r1 = rf(ctx, merchantId, currency, from, to, hasExistsReportId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*billingpb.RoyaltyReportProductSummaryItem)
		}
	}

	var r2 []primitive.ObjectID
	if rf, ok := ret.Get(2).(func(context.Context, string, string, time.Time, time.Time, bool) []primitive.ObjectID); ok {
		r2 = rf(ctx, merchantId, currency, from, to, hasExistsReportId)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([]primitive.ObjectID)
		}
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(context.Context, string, string, time.Time, time.Time, bool) error); ok {
		r3 = rf(ctx, merchantId, currency, from, to, hasExistsReportId)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// GetTransactionsPrivate provides a mock function with given fields: ctx, match, limit, offset
func (_m *OrderViewRepositoryInterface) GetTransactionsPrivate(ctx context.Context, match primitive.M, limit int64, offset int64) ([]*billingpb.OrderViewPrivate, error) {
	ret := _m.Called(ctx, match, limit, offset)

	var r0 []*billingpb.OrderViewPrivate
	if rf, ok := ret.Get(0).(func(context.Context, primitive.M, int64, int64) []*billingpb.OrderViewPrivate); ok {
		r0 = rf(ctx, match, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*billingpb.OrderViewPrivate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, primitive.M, int64, int64) error); ok {
		r1 = rf(ctx, match, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionsPublic provides a mock function with given fields: ctx, match, limit, offset
func (_m *OrderViewRepositoryInterface) GetTransactionsPublic(ctx context.Context, match primitive.M, limit int64, offset int64) ([]*billingpb.OrderViewPublic, error) {
	ret := _m.Called(ctx, match, limit, offset)

	var r0 []*billingpb.OrderViewPublic
	if rf, ok := ret.Get(0).(func(context.Context, primitive.M, int64, int64) []*billingpb.OrderViewPublic); ok {
		r0 = rf(ctx, match, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*billingpb.OrderViewPublic)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, primitive.M, int64, int64) error); ok {
		r1 = rf(ctx, match, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTurnoverSummary provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4, _a5
func (_m *OrderViewRepositoryInterface) GetTurnoverSummary(_a0 context.Context, _a1 string, _a2 string, _a3 string, _a4 time.Time, _a5 time.Time) ([]*pkg.TurnoverQueryResItem, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4, _a5)

	var r0 []*pkg.TurnoverQueryResItem
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, time.Time, time.Time) []*pkg.TurnoverQueryResItem); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4, _a5)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pkg.TurnoverQueryResItem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, time.Time, time.Time) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4, _a5)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVatSummary provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4, _a5
func (_m *OrderViewRepositoryInterface) GetVatSummary(_a0 context.Context, _a1 string, _a2 string, _a3 bool, _a4 time.Time, _a5 time.Time) ([]*pkg.VatReportQueryResItem, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4, _a5)

	var r0 []*pkg.VatReportQueryResItem
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool, time.Time, time.Time) []*pkg.VatReportQueryResItem); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4, _a5)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pkg.VatReportQueryResItem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, bool, time.Time, time.Time) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4, _a5)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
